{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createGenerateClassName;\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar escapeRegex = /([[\\].#*$><+~=|^:(),\"'`\\s])/g;\n\nfunction safePrefix(classNamePrefix) {\n  var prefix = String(classNamePrefix);\n  (0, _warning2.default)(prefix.length < 256, 'Material-UI: the class name prefix is too long: ' + prefix + '.'); // Sanitize the string as will be used to prefix the generated class name.\n\n  return prefix.replace(escapeRegex, '-');\n} // Returns a function which generates unique class names based on counters.\n// When new generator function is created, rule counter is reset.\n// We need to reset the rule counter for SSR for each request.\n//\n// It's inspired by\n// https://github.com/cssinjs/jss/blob/4e6a05dd3f7b6572fdd3ab216861d9e446c20331/src/utils/createGenerateClassName.js\n\n\nfunction createGenerateClassName() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options$dangerouslyU = options.dangerouslyUseGlobalCSS,\n      dangerouslyUseGlobalCSS = _options$dangerouslyU === undefined ? false : _options$dangerouslyU,\n      _options$productionPr = options.productionPrefix,\n      productionPrefix = _options$productionPr === undefined ? 'jss' : _options$productionPr,\n      _options$seed = options.seed,\n      seed = _options$seed === undefined ? '' : _options$seed;\n  var ruleCounter = 0;\n  return function (rule, styleSheet) {\n    ruleCounter += 1;\n    (0, _warning2.default)(ruleCounter < 1e10, ['Material-UI: you might have a memory leak.', 'The ruleCounter is not supposed to grow that much.'].join(''));\n\n    if (dangerouslyUseGlobalCSS && styleSheet && styleSheet.options.name) {\n      return safePrefix(styleSheet.options.name) + '-' + rule.key;\n    }\n\n    if (process.env.NODE_ENV === 'production') {\n      return '' + productionPrefix + seed + ruleCounter;\n    } // Help with debuggability.\n\n\n    if (styleSheet && styleSheet.options.classNamePrefix) {\n      return safePrefix(styleSheet.options.classNamePrefix) + '-' + rule.key + '-' + seed + ruleCounter;\n    }\n\n    return rule.key + '-' + seed + ruleCounter;\n  };\n}","map":{"version":3,"sources":["/home/nick/Desktop/blog_app/client/node_modules/@bit/mui-org.material-ui.styles/dist/styles/createGenerateClassName.js"],"names":["Object","defineProperty","exports","value","default","createGenerateClassName","_warning","require","_warning2","_interopRequireDefault","obj","__esModule","escapeRegex","safePrefix","classNamePrefix","prefix","String","length","replace","options","arguments","undefined","_options$dangerouslyU","dangerouslyUseGlobalCSS","_options$productionPr","productionPrefix","_options$seed","seed","ruleCounter","rule","styleSheet","join","name","key","process","env","NODE_ENV"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,uBAAlB;;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AAEA,IAAIC,SAAS,GAAGC,sBAAsB,CAACH,QAAD,CAAtC;;AAEA,SAASG,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEN,IAAAA,OAAO,EAAEM;AAAX,GAArC;AAAwD;;AAE/F,IAAIE,WAAW,GAAG,8BAAlB;;AAEA,SAASC,UAAT,CAAoBC,eAApB,EAAqC;AACnC,MAAIC,MAAM,GAAGC,MAAM,CAACF,eAAD,CAAnB;AACA,GAAC,GAAGN,SAAS,CAACJ,OAAd,EAAuBW,MAAM,CAACE,MAAP,GAAgB,GAAvC,EAA4C,qDAAqDF,MAArD,GAA8D,GAA1G,EAFmC,CAGnC;;AACA,SAAOA,MAAM,CAACG,OAAP,CAAeN,WAAf,EAA4B,GAA5B,CAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASP,uBAAT,GAAmC;AACjC,MAAIc,OAAO,GAAGC,SAAS,CAACH,MAAV,GAAmB,CAAnB,IAAwBG,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;AACA,MAAIE,qBAAqB,GAAGH,OAAO,CAACI,uBAApC;AAAA,MACIA,uBAAuB,GAAGD,qBAAqB,KAAKD,SAA1B,GAAsC,KAAtC,GAA8CC,qBAD5E;AAAA,MAEIE,qBAAqB,GAAGL,OAAO,CAACM,gBAFpC;AAAA,MAGIA,gBAAgB,GAAGD,qBAAqB,KAAKH,SAA1B,GAAsC,KAAtC,GAA8CG,qBAHrE;AAAA,MAIIE,aAAa,GAAGP,OAAO,CAACQ,IAJ5B;AAAA,MAKIA,IAAI,GAAGD,aAAa,KAAKL,SAAlB,GAA8B,EAA9B,GAAmCK,aAL9C;AAOA,MAAIE,WAAW,GAAG,CAAlB;AAEA,SAAO,UAAUC,IAAV,EAAgBC,UAAhB,EAA4B;AACjCF,IAAAA,WAAW,IAAI,CAAf;AACA,KAAC,GAAGpB,SAAS,CAACJ,OAAd,EAAuBwB,WAAW,GAAG,IAArC,EAA2C,CAAC,4CAAD,EAA+C,oDAA/C,EAAqGG,IAArG,CAA0G,EAA1G,CAA3C;;AAEA,QAAIR,uBAAuB,IAAIO,UAA3B,IAAyCA,UAAU,CAACX,OAAX,CAAmBa,IAAhE,EAAsE;AACpE,aAAOnB,UAAU,CAACiB,UAAU,CAACX,OAAX,CAAmBa,IAApB,CAAV,GAAsC,GAAtC,GAA4CH,IAAI,CAACI,GAAxD;AACD;;AAED,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,aAAO,KAAKX,gBAAL,GAAwBE,IAAxB,GAA+BC,WAAtC;AACD,KAVgC,CAYjC;;;AACA,QAAIE,UAAU,IAAIA,UAAU,CAACX,OAAX,CAAmBL,eAArC,EAAsD;AACpD,aAAOD,UAAU,CAACiB,UAAU,CAACX,OAAX,CAAmBL,eAApB,CAAV,GAAiD,GAAjD,GAAuDe,IAAI,CAACI,GAA5D,GAAkE,GAAlE,GAAwEN,IAAxE,GAA+EC,WAAtF;AACD;;AAED,WAAOC,IAAI,CAACI,GAAL,GAAW,GAAX,GAAiBN,IAAjB,GAAwBC,WAA/B;AACD,GAlBD;AAmBD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createGenerateClassName;\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar escapeRegex = /([[\\].#*$><+~=|^:(),\"'`\\s])/g;\n\nfunction safePrefix(classNamePrefix) {\n  var prefix = String(classNamePrefix);\n  (0, _warning2.default)(prefix.length < 256, 'Material-UI: the class name prefix is too long: ' + prefix + '.');\n  // Sanitize the string as will be used to prefix the generated class name.\n  return prefix.replace(escapeRegex, '-');\n}\n\n// Returns a function which generates unique class names based on counters.\n// When new generator function is created, rule counter is reset.\n// We need to reset the rule counter for SSR for each request.\n//\n// It's inspired by\n// https://github.com/cssinjs/jss/blob/4e6a05dd3f7b6572fdd3ab216861d9e446c20331/src/utils/createGenerateClassName.js\nfunction createGenerateClassName() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options$dangerouslyU = options.dangerouslyUseGlobalCSS,\n      dangerouslyUseGlobalCSS = _options$dangerouslyU === undefined ? false : _options$dangerouslyU,\n      _options$productionPr = options.productionPrefix,\n      productionPrefix = _options$productionPr === undefined ? 'jss' : _options$productionPr,\n      _options$seed = options.seed,\n      seed = _options$seed === undefined ? '' : _options$seed;\n\n  var ruleCounter = 0;\n\n  return function (rule, styleSheet) {\n    ruleCounter += 1;\n    (0, _warning2.default)(ruleCounter < 1e10, ['Material-UI: you might have a memory leak.', 'The ruleCounter is not supposed to grow that much.'].join(''));\n\n    if (dangerouslyUseGlobalCSS && styleSheet && styleSheet.options.name) {\n      return safePrefix(styleSheet.options.name) + '-' + rule.key;\n    }\n\n    if (process.env.NODE_ENV === 'production') {\n      return '' + productionPrefix + seed + ruleCounter;\n    }\n\n    // Help with debuggability.\n    if (styleSheet && styleSheet.options.classNamePrefix) {\n      return safePrefix(styleSheet.options.classNamePrefix) + '-' + rule.key + '-' + seed + ruleCounter;\n    }\n\n    return rule.key + '-' + seed + ruleCounter;\n  };\n}\n\n//# sourceMappingURL=createGenerateClassName.js.map"]},"metadata":{},"sourceType":"script"}