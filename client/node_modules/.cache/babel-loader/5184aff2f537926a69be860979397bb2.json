{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertHexToRGB = convertHexToRGB;\nexports.rgbToHex = rgbToHex;\nexports.decomposeColor = decomposeColor;\nexports.recomposeColor = recomposeColor;\nexports.getContrastRatio = getContrastRatio;\nexports.getLuminance = getLuminance;\nexports.emphasize = emphasize;\nexports.fade = fade;\nexports.darken = darken;\nexports.lighten = lighten;\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\n\n\nfunction clamp(value) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  (0, _warning2.default)(value >= min && value <= max, 'Material-UI: the value provided ' + value + ' is out of range [' + min + ', ' + max + '].');\n\n  if (value < min) {\n    return min;\n  }\n\n  if (value > max) {\n    return max;\n  }\n\n  return value;\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n/* eslint-disable no-use-before-define */\n\n\nfunction convertHexToRGB(color) {\n  color = color.substr(1);\n  var re = new RegExp('.{1,' + color.length / 3 + '}', 'g');\n  var colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(function (n) {\n      return n + n;\n    });\n  }\n\n  return colors ? 'rgb(' + colors.map(function (n) {\n    return parseInt(n, 16);\n  }).join(', ') + ')' : '';\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n *\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\n\nfunction rgbToHex(color) {\n  // Pass hex straight through\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  function intToHex(c) {\n    var hex = c.toString(16);\n    return hex.length === 1 ? '0' + hex : hex;\n  }\n\n  var _decomposeColor = decomposeColor(color),\n      values = _decomposeColor.values;\n\n  values = values.map(function (n) {\n    return intToHex(n);\n  });\n  return '#' + values.join('');\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\n\n\nfunction decomposeColor(color) {\n  if (color.charAt(0) === '#') {\n    return decomposeColor(convertHexToRGB(color));\n  }\n\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n  var values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map(function (value) {\n    return parseFloat(value);\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\n      throw new Error(['Material-UI: unsupported `' + color + '` color.', 'We support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().'].join('\\n'));\n    }\n  }\n\n  return {\n    type: type,\n    values: values\n  };\n}\n/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\n\nfunction recomposeColor(color) {\n  var type = color.type;\n  var values = color.values;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map(function (n, i) {\n      return i < 3 ? parseInt(n, 10) : n;\n    });\n  }\n\n  if (type.indexOf('hsl') !== -1) {\n    values[1] = values[1] + '%';\n    values[2] = values[2] + '%';\n  }\n\n  return color.type + '(' + values.join(', ') + ')';\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\n\n\nfunction getContrastRatio(foreground, background) {\n  var lumA = getLuminance(foreground);\n  var lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\n\nfunction getLuminance(color) {\n  var decomposedColor = decomposeColor(color);\n\n  if (decomposedColor.type.indexOf('rgb') !== -1) {\n    var rgb = decomposedColor.values.map(function (val) {\n      val /= 255; // normalized\n\n      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n    }); // Truncate at 3 digits\n\n    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n  } // else if (decomposedColor.type.indexOf('hsl') !== -1)\n\n\n  return decomposedColor.values[2] / 100;\n}\n/**\n * Darken or lighten a colour, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction emphasize(color) {\n  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction fade(color, value) {\n  (0, _warning2.default)(color, 'Material-UI: missing color argument in fade(' + color + ', ' + value + ').');\n  if (!color) return color;\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  color.values[3] = value;\n  return recomposeColor(color);\n}\n/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction darken(color, coefficient) {\n  (0, _warning2.default)(color, 'Material-UI: missing color argument in darken(' + color + ', ' + coefficient + ').');\n  if (!color) return color;\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction lighten(color, coefficient) {\n  (0, _warning2.default)(color, 'Material-UI: missing color argument in lighten(' + color + ', ' + coefficient + ').');\n  if (!color) return color;\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}","map":{"version":3,"sources":["/home/nick/Desktop/blog_app/client/node_modules/@bit/mui-org.material-ui.styles/dist/styles/colorManipulator.js"],"names":["Object","defineProperty","exports","value","convertHexToRGB","rgbToHex","decomposeColor","recomposeColor","getContrastRatio","getLuminance","emphasize","fade","darken","lighten","_warning","require","_warning2","_interopRequireDefault","obj","__esModule","default","clamp","min","arguments","length","undefined","max","color","substr","re","RegExp","colors","match","map","n","parseInt","join","indexOf","intToHex","c","hex","toString","_decomposeColor","values","charAt","marker","type","substring","split","parseFloat","process","env","NODE_ENV","Error","i","foreground","background","lumA","lumB","Math","decomposedColor","rgb","val","pow","Number","toFixed","coefficient"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertHexToRGB = convertHexToRGB;\nexports.rgbToHex = rgbToHex;\nexports.decomposeColor = decomposeColor;\nexports.recomposeColor = recomposeColor;\nexports.getContrastRatio = getContrastRatio;\nexports.getLuminance = getLuminance;\nexports.emphasize = emphasize;\nexports.fade = fade;\nexports.darken = darken;\nexports.lighten = lighten;\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  (0, _warning2.default)(value >= min && value <= max, 'Material-UI: the value provided ' + value + ' is out of range [' + min + ', ' + max + '].');\n\n  if (value < min) {\n    return min;\n  }\n  if (value > max) {\n    return max;\n  }\n  return value;\n}\n\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n/* eslint-disable no-use-before-define */\n\nfunction convertHexToRGB(color) {\n  color = color.substr(1);\n\n  var re = new RegExp('.{1,' + color.length / 3 + '}', 'g');\n  var colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(function (n) {\n      return n + n;\n    });\n  }\n\n  return colors ? 'rgb(' + colors.map(function (n) {\n    return parseInt(n, 16);\n  }).join(', ') + ')' : '';\n}\n\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n *\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\nfunction rgbToHex(color) {\n  // Pass hex straight through\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n  function intToHex(c) {\n    var hex = c.toString(16);\n    return hex.length === 1 ? '0' + hex : hex;\n  }\n\n  var _decomposeColor = decomposeColor(color),\n      values = _decomposeColor.values;\n\n  values = values.map(function (n) {\n    return intToHex(n);\n  });\n\n  return '#' + values.join('');\n}\n\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\nfunction decomposeColor(color) {\n  if (color.charAt(0) === '#') {\n    return decomposeColor(convertHexToRGB(color));\n  }\n\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n  var values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map(function (value) {\n    return parseFloat(value);\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\n      throw new Error(['Material-UI: unsupported `' + color + '` color.', 'We support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().'].join('\\n'));\n    }\n  }\n\n  return { type: type, values: values };\n}\n\n/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\nfunction recomposeColor(color) {\n  var type = color.type;\n  var values = color.values;\n\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map(function (n, i) {\n      return i < 3 ? parseInt(n, 10) : n;\n    });\n  }\n\n  if (type.indexOf('hsl') !== -1) {\n    values[1] = values[1] + '%';\n    values[2] = values[2] + '%';\n  }\n\n  return color.type + '(' + values.join(', ') + ')';\n}\n\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\nfunction getContrastRatio(foreground, background) {\n  var lumA = getLuminance(foreground);\n  var lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\nfunction getLuminance(color) {\n  var decomposedColor = decomposeColor(color);\n\n  if (decomposedColor.type.indexOf('rgb') !== -1) {\n    var rgb = decomposedColor.values.map(function (val) {\n      val /= 255; // normalized\n      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n    });\n    // Truncate at 3 digits\n    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n  }\n\n  // else if (decomposedColor.type.indexOf('hsl') !== -1)\n  return decomposedColor.values[2] / 100;\n}\n\n/**\n * Darken or lighten a colour, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction emphasize(color) {\n  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction fade(color, value) {\n  (0, _warning2.default)(color, 'Material-UI: missing color argument in fade(' + color + ', ' + value + ').');\n\n  if (!color) return color;\n\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n  color.values[3] = value;\n\n  return recomposeColor(color);\n}\n\n/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction darken(color, coefficient) {\n  (0, _warning2.default)(color, 'Material-UI: missing color argument in darken(' + color + ', ' + coefficient + ').');\n\n  if (!color) return color;\n\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\n\n/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction lighten(color, coefficient) {\n  (0, _warning2.default)(color, 'Material-UI: missing color argument in lighten(' + color + ', ' + coefficient + ').');\n\n  if (!color) return color;\n\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n\n//# sourceMappingURL=colorManipulator.js.map"]},"metadata":{},"sourceType":"script"}